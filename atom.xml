<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUANWISE</title>
  
  <subtitle>椽子的博客 (｡･∀･)ﾉﾞ</subtitle>
  <link href="https://chuanwise.github.io/atom.xml" rel="self"/>
  
  <link href="https://chuanwise.github.io/"/>
  <updated>2021-05-15T15:41:23.347Z</updated>
  <id>https://chuanwise.github.io/</id>
  
  <author>
    <name>Chuanwise</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小明框架开发文档</title>
    <link href="https://chuanwise.github.io/2021/04/19/%E5%B0%8F%E6%98%8E%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/"/>
    <id>https://chuanwise.github.io/2021/04/19/%E5%B0%8F%E6%98%8E%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/</id>
    <published>2021-04-18T23:28:57.000Z</published>
    <updated>2021-05-15T15:41:23.347Z</updated>
    
    <content type="html"><![CDATA[<p>本文对应 Github 项目：<a href="https://github.com/Chuanwise/xiaoming-bot">小明框架</a></p><p>小明机器人是一款基于 <code>Mirai</code> 的插件化、便于上手、简单小巧的通用 QQ 机器人框架。</p><ul><li>QQ群：<code>1028959718</code></li><li>作者：<code>椽子</code></li></ul><p><strong>请遵循 <code>Apache-2.0</code> 开源协议使用小明机器人框架</strong>。</p><h2 id="组件介绍"><a class="markdownIt-Anchor" href="#组件介绍"></a> 组件介绍</h2><p>本项目有三个组件，api、core 和 host。<br><code>api</code> 是一组小明调用标准，<code>core</code> 是对 api 的一种规范实现，<code>host</code> 是小明本体的启动器。</p><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识"></a> 前置知识</h2><ul><li><code>Java</code> 基础知识：必须</li><li><code>Maven</code> 用法：必须</li><li><code>Git</code>：锦上添花</li></ul><h2 id="快速开始"><a class="markdownIt-Anchor" href="#快速开始"></a> 快速开始</h2><p>你可以下载最新的 <code>RELEASE</code>，将之添加在项目的库中，或使用 <code>mvn</code> 安装 <code>core</code> 后，在 <code>pom.xml</code> 中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chuanwise<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xiaoming-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随后创建插件主类。插件主类必须实现 <code>com.chuanwise.xiaoming.api.plugin.XiaomingPlugin</code> 接口。你可以选择继承自内核的实现 <code>com.chuanwise.xiaoming.core.plugin.XiaomingPluginImpl</code>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuanwise.xiaoming.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.api.user.XiaomingUser;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.core.plugin.XiaomingPluginImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件主类示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuanwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">extends</span> <span class="title">XiaomingPluginImpl</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个插件已经能被小明加载了，但还没有任何功能。我们先将其打包运行吧！</p><h2 id="打包运行"><a class="markdownIt-Anchor" href="#打包运行"></a> 打包运行</h2><p>请在资源文件夹 <code>resources</code> 中创建 <code>plugin.json</code>，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;example-plugin-name&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;com.chuanwise.xiaoming.example.ExamplePlugin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Chuanwise&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.TEST&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;fronts&quot;</span>: [ <span class="string">&quot;lexicons&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="name插件名"><a class="markdownIt-Anchor" href="#name插件名"></a> <code>name</code>：插件名</h3><p>选填，默认值为 <code>jar</code> 文件名。建议自行设计一个名字。</p><h3 id="main插件主类名"><a class="markdownIt-Anchor" href="#main插件主类名"></a> <code>main</code>：插件主类名</h3><p>必填，值为插件主类名。</p><h3 id="version版本"><a class="markdownIt-Anchor" href="#version版本"></a> <code>version</code>：版本</h3><p>选填，默认值为 <code>(unknown)</code></p><h3 id="fronts前置插件名列表"><a class="markdownIt-Anchor" href="#fronts前置插件名列表"></a> <code>fronts</code>：前置插件名列表</h3><p>选填，默认值为空。小明只会在加载完全部 <code>fronts</code> 里的插件后加载本插件。</p><p>除上述内容外你还可以增加其他的键，可以在插件主类中获得他们的值。</p><p>将此插件打包为 <code>jar</code> 文件后放在 <code>小明根目录/plugins</code>，重新启动小明或执行小明指令 <code>#加载 &lt;你的插件名&gt;</code>（此热加载功能尚在实现中）即可加载本插件。</p><h2 id="聊天消息处理"><a class="markdownIt-Anchor" href="#聊天消息处理"></a> 聊天消息处理</h2><p>小明的聊天消息可分三类：群聊、私聊和群临时会话。它们都可以通过下述方式处理：</p><h3 id="单句聊天消息"><a class="markdownIt-Anchor" href="#单句聊天消息"></a> 单句聊天消息</h3><p>通过重写 <code>XiaomingPlugin</code> 类中的 <code>onMessage</code> 方法，可以实现对所有类型聊天消息的监听。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuanwise.xiaoming.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.api.user.XiaomingUser;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.core.plugin.XiaomingPluginImpl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件主类示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuanwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">extends</span> <span class="title">XiaomingPluginImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMessage</span><span class="params">(XiaomingUser user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (user.inGroup()) &#123;</span><br><span class="line">            user.sendMessage(user.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子展示了给用户发消息的方法 <code>user.sendMessage(...)</code>、判断用户当前位置的方法 <code>user.inGroup()</code> 和获得当前用户输入的方法：<code>user.getMessage()</code>。其功能是复读所有小明所在的群消息。</p><h3 id="功能更强大的监听方式"><a class="markdownIt-Anchor" href="#功能更强大的监听方式"></a> 功能更强大的监听方式</h3><p>小明支持上下文相关的消息交互。例如：用户输入<code>小明在吗</code>，小明回答<code>在，啥事</code>，用户继续输入<code>没事</code>或其他内容，小明视具体回答回复。</p><p>要实现这个功能，需要一个继承自 <code>com.chuanwise.xiaoming.core.interactor.message.MessageInteractorImpl</code> 的类作为交互器。在其中使用<code>com.chuanwise.xiaoming.api.annotation.Filter</code>注解该方法的触发信息。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuanwise.xiaoming.example.interactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.api.annotation.Filter;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.api.user.XiaomingUser;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.core.interactor.message.MessageInteractorImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息交互器示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuanwise </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageInteractorTest</span> <span class="keyword">extends</span> <span class="title">MessageInteractorImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 收到 &quot;小明在吗&quot; 的消息时，该方法响应</span></span><br><span class="line">    <span class="meta">@Filter(&quot;小明在吗&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(XiaomingUser user)</span> </span>&#123;</span><br><span class="line">        user.sendMessage(<span class="string">&quot;在，啥事&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> String nextInput = user.nextInput();</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(nextInput, <span class="string">&quot;没事&quot;</span>)) &#123;</span><br><span class="line">            user.sendMessage(<span class="string">&quot;彳亍吧，下次有事记得叫我哦&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 有事时的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这类响应聊天消息的方法，统称<code>交互方法</code>。存在交互方法的类，都是<code>交互器</code>。在插件启动时，你需要注册该交互器的实例。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuanwise.xiaoming.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.api.user.XiaomingUser;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.core.plugin.XiaomingPluginImpl;</span><br><span class="line"><span class="keyword">import</span> com.chuanwise.xiaoming.example.interactor.MessageInteractorTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插件主类示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuanwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamplePlugin</span> <span class="keyword">extends</span> <span class="title">XiaomingPluginImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册一个交互器</span></span><br><span class="line">        getXiaomingBot().getInteractorManager().register(<span class="keyword">new</span> MessageInteractorTest(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互方法起码要有一个 <code>Filter</code>（过滤器）注解。它有两种形式：<br><code>@Filter(&quot;文本信息&quot;)</code><br><code>@Filter(value = &quot;文本信息&quot;, pattern = FilterPattern.EQUALS)</code></p><p>小明不喜欢那种无条件触发的交互方法，这可能会让小明所在的群非常吵，所以交互方法至少要有一个 <code>Filter</code>。但如果你仍然希望该交互方法被无条件触发，只需要使用<code>@Filter(value = &quot;&quot;, pattern = FilterPattern.STARTS_WITH)</code>。或直接监听聊天消息。</p><h2 id="核心"><a class="markdownIt-Anchor" href="#核心"></a> 核心</h2><p>小明由本体和各个组件组成。</p><h3 id="小明本体xiaomingbot"><a class="markdownIt-Anchor" href="#小明本体xiaomingbot"></a> 小明本体：<code>XiaomingBot</code></h3><p>几乎在所有的类下，你都可以通过 <code>getXiaomingBot()</code> 获得该类所属的小明机器人本体。本体提供了大量组件的获取方法，方便你进行各类操作。</p><p>小明本体的方法主要是各类组件的引用，即以 <code>get</code> 开头的大部分无参方法。</p><table><thead><tr><th>方法名</th><th>组件说明</th></tr></thead><tbody><tr><td><code>getUserCallLimitManager()</code></td><td>用户调用限制器</td></tr><tr><td><code>getTextManager()</code></td><td>说明文本管理器</td></tr><tr><td><code>getRegularPreserveManager()</code></td><td>文件定时保存线程</td></tr><tr><td><code>getEventListenerManager()</code></td><td>监听器管理器</td></tr><tr><td><code>getResponseGroupManager()</code></td><td>响应群管理器</td></tr><tr><td><code>getFilePreservableFactory()</code></td><td>文件加载器</td></tr><tr><td><code>getReceiptionistManager()</code></td><td>接待线程管理器</td></tr><tr><td><code>getLicenseManager()</code></td><td>强制验证管理器</td></tr><tr><td><code>getPluginManager()</code></td><td>插件管理器</td></tr><tr><td><code>getInteractorManager()</code></td><td>交互器管理器</td></tr><tr><td><code>getConsoleXiaomingUser()</code></td><td>控制台小明用户</td></tr><tr><td><code>getStatistician()</code></td><td>统计数据管理器</td></tr><tr><td><code>getAccountManager()</code></td><td>账户管理器</td></tr><tr><td><code>getWordManager()</code></td><td>提示语管理器</td></tr><tr><td><code>getPermissionManager()</code></td><td>权限管理器</td></tr><tr><td><code>getService()</code></td><td>小明线程池</td></tr><tr><td><code>getConfig()</code></td><td>小明配置信息</td></tr></tbody></table><p>这些组件将在下文逐一介绍。</p><p>此外还有一些功能性方法：</p><table><thead><tr><th>方法名</th><th>组件说明</th></tr></thead><tbody><tr><td><code>load()</code></td><td>重新加载所有小明组件</td></tr><tr><td><code>load(String name)</code></td><td>重新加载指定的小明组件</td></tr><tr><td><code>setMiraiBot()</code></td><td>设置小明核心的 <code>mirai</code> 机器人</td></tr><tr><td><code>getMiraiBot()</code></td><td>获得小明核心的 <code>mirai</code> 机器人</td></tr><tr><td><code>isStop()</code></td><td>判断小明是否停机</td></tr><tr><td><code>start()</code></td><td>启动小明</td></tr><tr><td><code>setConsoleXiaomingUser()</code></td><td>设置小明的控制台用户</td></tr><tr><td><code>execute(Thread thread)</code></td><td>执行一个线程</td></tr><tr><td><code>execute(Runnable runnable)</code></td><td>执行一个线程</td></tr><tr><td><code>stop()</code></td><td>关闭小明</td></tr></tbody></table><p>请不要直接使用类似 <code>new Thread(runnable).start();</code> 的方式执行线程。请采用 <code>getXiaomingBot().execute(runnable)</code> 的方式。只有通过这种方式启动的线程才会收到小明的关闭通知。</p><h3 id="小明使用者xiaominguser"><a class="markdownIt-Anchor" href="#小明使用者xiaominguser"></a> 小明使用者：<code>XiaomingUser</code></h3><p>每一个小明的使用者都是该类的对象，就连控制台也不例外。</p><p><code>XiaomingUser</code> 类有非常多实用方法，主要有三类：发送消息类、接收消息类和其他类。</p><h4 id="发送消息类"><a class="markdownIt-Anchor" href="#发送消息类"></a> 发送消息类</h4><p>发送消息类方法有很多的重载形式，返回值皆为 <code>boolean</code> ，表示消息是否被发送成功。倒数两个参数一般是 <code>Object</code> 和 <code>Object...</code>。前者是消息。小明执行它的 <code>toString()</code> 方法得到消息内容。在消息内容中可以存在 <code>&#123;&#125;</code>，将会被按顺序替换为 <code>Object...</code> 中的参数。例如：<code>user.sendPrivateMessage(&quot;小明不能帮你做这件事哦，因为你缺少权限：&#123;&#125;&quot;, permissionNode)</code>，等同于 <code>user.sendPrivateMessage(&quot;小明不能帮你做这件事哦，因为你缺少权限：&quot; + permissionNode)</code>。</p><table><thead><tr><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>sendError(Object, Object...)</code></td><td>给当前用户发送错误消息</td></tr><tr><td><code>sendWarn(Object, Object...)</code></td><td>给当前用户发送警告消息</td></tr><tr><td><code>sendMessage(Object, Object...)</code></td><td>给当前用户发送普通消息</td></tr><tr><td><code>sendPrivateError(Object, Object...)</code></td><td>给当前用户私发错误消息</td></tr><tr><td><code>sendPrivateWarn(Object, Object...)</code></td><td>给当前用户私发警告消息</td></tr><tr><td><code>sendPrivateMessage(Object, Object...)</code></td><td>给当前用户私发普通消息</td></tr></tbody></table><p>上述方法是通常使用的发送消息的方法。此外你还可以使用下列方法：</p><table><thead><tr><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>sendGroupMessage(Object, Object...)</code></td><td>如果小明为群聊或群临时会话用户，则向其对应的群中发送消息</td></tr><tr><td><code>sendGroupMessage(long, Object, Object...)</code></td><td>在指定的群中发消息</td></tr><tr><td><code>sendGroupAtMessage(Object, Object...)</code></td><td>先 @ 用户，再给用户发消息</td></tr><tr><td><code>sendGroupAtMessage(long, long, Object, Object...)</code></td><td>在指定的群中先 @ 特定用户，再给其发消息</td></tr><tr><td><code>sendPrivateMessage(Object, Object...)</code></td><td>给当前小明用户发送私聊消息</td></tr><tr><td><code>sendPrivateMessage(long, Object, Object...)</code></td><td>给指定的用户发送私聊消息</td></tr><tr><td><code>sendPrivateMessage(long, long, Object, Object...)</code></td><td>给指定的群中的用户发送私聊消息。第一个 <code>long</code> 为群号，第二个为 <code>QQ</code> 号。</td></tr></tbody></table><h4 id="接收消息类"><a class="markdownIt-Anchor" href="#接收消息类"></a> 接收消息类</h4><table><thead><tr><th>返回类型</th><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>nextInput()</code></td><td>获得用户在十分钟之内的下一次输入</td></tr><tr><td><code>String</code></td><td><code>nextInput(long)</code></td><td>获得用户在指定时长之内的下一次输入</td></tr><tr><td><code>String</code></td><td><code>nextInput(long, Function)</code></td><td>获得用户在指定时长之内的下一次输入。超时时执行指定的方法。</td></tr><tr><td><code>String</code></td><td><code>nextInput(Function)</code></td><td>获得用户在十分钟之内的下一次输入。超时时执行指定的方法。</td></tr></tbody></table><p>默认超时后会退出当前交互器。你可以通过捕捉 <code>InteractorTimeoutException</code> 异常以阻止超时退出。</p><h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4><p>在发送较长的消息时，使用 <code>StringBuffer</code> 构造字符串存在换行的麻烦。小明内也集成了一个 <code>StringBuffer</code>，用来收集若干次 <code>sendMessage</code> 类消息的输出。与之相关的方法有：</p><table><thead><tr><th>返回类型</th><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>StringBuffer</code></td><td><code>getBuffer()</code></td><td>获得当前的消息缓冲区</td></tr><tr><td><code>void</code></td><td><code>appendBuffer(String)</code></td><td>在当前消息缓冲区中增加一行文字</td></tr><tr><td><code>void</code></td><td><code>enableBuffer()</code></td><td>接下来让小明将消息存放在缓冲区中</td></tr><tr><td><code>void</code></td><td><code>setUsingBuffer(boolean)</code></td><td>启动或关闭缓冲区</td></tr><tr><td><code>void</code></td><td><code>clearBuffer()</code></td><td>清除缓冲区信息</td></tr><tr><td><code>String</code></td><td><code>getBufferAndClear()</code></td><td>提取缓冲区消息，并清除后关闭缓冲区</td></tr><tr><td><code>boolean</code></td><td><code>isUsingBuffer()</code></td><td>判断当前是否正在使用缓冲区</td></tr></tbody></table><p>你可以通过缓冲区机制实现多次输出的合并。例如小明有一个指令是 <code>批处理&lt;remain&gt;</code>，你可以通过类似下面的方法避免频繁发送每次指令执行时的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chuanwise.xiaoming.core.interactor.core;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局指令处理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chuanwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalCommandInteractor</span> <span class="keyword">extends</span> <span class="title">CommandInteractorImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BAT_REGEX = <span class="string">&quot;(批处理|bat)&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批处理指令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 指令执行者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remain 指令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Filter(BAT_REGEX + &quot;&#123;remain&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMultipleCommands</span><span class="params">(XiaomingUser user, <span class="meta">@FilterParameter(&quot;remain&quot;)</span> String remain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String[] subCommands = remain.split(Pattern.quote(<span class="string">&quot;\\n&quot;</span>), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来使用小明缓冲区，将输出到这里</span></span><br><span class="line">        user.enableBuffer();</span><br><span class="line">        <span class="keyword">int</span> commandNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subCommands.length; i++) &#123;</span><br><span class="line">                String command = subCommands[i];</span><br><span class="line">                <span class="keyword">if</span> (command.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                user.setMessage(command);</span><br><span class="line">                <span class="keyword">if</span> (getXiaomingBot().getInteractorManager().onCommand(user)) &#123;</span><br><span class="line">                    commandNumber++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    user.sendError(<span class="string">&quot;无效的命令：&#123;&#125;，批处理任务被中断。&quot;</span>, command);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            user.sendError(<span class="string">&quot;执行&#123;&#125;个指令时出现异常，批处理任务被中断。&quot;</span>);</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取缓冲区信息，恢复正常输出</span></span><br><span class="line">        <span class="keyword">final</span> String bufferString = user.getBufferAndClear();</span><br><span class="line">        user.sendPrivateMessage(bufferString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (commandNumber == <span class="number">0</span>) &#123;</span><br><span class="line">            user.sendError(<span class="string">&quot;小明没能成功执行任何一个指令&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            user.sendMessage(<span class="string">&quot;成功执行了 &#123;&#125; 个指令&quot;</span>, commandNumber);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外小明还有记录最近几条有效输入记录的功能。它主要用于异常报告，但也可供平时使用。与之相关的方法为：</p><table><thead><tr><th>返回类型</th><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>List&lt;String&gt;</code></td><td><code>getRecentInputs()</code></td><td>获得最近的几次有效输入</td></tr><tr><td><code>void</code></td><td><code>clearRecentInputs()</code></td><td>清除最近几次有效输入</td></tr></tbody></table><p>判断和获取用户会话环境的方法：</p><table><thead><tr><th>返回类型</th><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>inPrivate()</code></td><td>判断用户当前是否在私聊</td></tr><tr><td><code>boolean</code></td><td><code>inGroup()</code></td><td>判断用户当前是否在群聊</td></tr><tr><td><code>boolean</code></td><td><code>inTemp()</code></td><td>判断用户当前是否在临时会话</td></tr><tr><td><code>Group</code></td><td><code>getGroup()</code></td><td>如果用户当前在临时会话或群聊，获得相关的群</td></tr><tr><td><code>Friend</code></td><td><code>getAsPrivate()</code></td><td>如果此时为私聊，获得私聊会话</td></tr><tr><td><code>Member</code></td><td><code>getAsTempMember()</code></td><td>如果此时为临时会话，获得临时会话</td></tr><tr><td><code>Member</code></td><td><code>getAsGroupMember()</code></td><td>如果此时为群聊，获得群聊会话</td></tr><tr><td><code>ResponseGroup</code></td><td><code>getResponseGroup()</code></td><td>如果此时为临时会话或群聊，获得对应的响应群（临时会话时可能会失败）</td></tr><tr><td><code>long</code></td><td><code>getQQ()</code></td><td>获取用户 <code>QQ</code></td></tr><tr><td><code>String</code></td><td><code>getMessage()</code></td><td>获取用户输入</td></tr><tr><td><code>void</code></td><td><code>setMessage(String)</code></td><td>改变用户输入</td></tr></tbody></table><p>其他相关方法：</p><table><thead><tr><th>返回类型</th><th>方法原型</th><th>说明</th></tr></thead><tbody><tr><td><code>String</code></td><td><code>getCompleteName()</code></td><td>获取用户全名（包含群号等信息）</td></tr><tr><td><code>Receptionist</code></td><td><code>getReceptionist()</code></td><td>获得该用户的接待线程</td></tr><tr><td><code>boolean</code></td><td><code>hasPermission(String[])</code></td><td>判断用户是否有所需权限</td></tr><tr><td><code>boolean</code></td><td><code>hasPermission(String)</code></td><td>判断用户是否有所需权限</td></tr><tr><td><code>boolean</code></td><td><code>requirePermission(String)</code></td><td>当用户没有所需权限时提醒，并返回 <code>false</code></td></tr><tr><td><code>boolean</code></td><td><code>isBlockPlugin(String)</code></td><td>判断用户是否屏蔽某插件</td></tr><tr><td><code>Account</code></td><td><code>getAccount()</code></td><td>获取该用户在小明这里的账户信息。如果此前无相关信息返回 <code>null</code></td></tr><tr><td><code>Account</code></td><td><code>getOrPutAccount()</code></td><td>获取或新建该用户在小明这里的账户信息</td></tr><tr><td><code>XiaomingBot</code></td><td><code>getXiaomingBot()</code></td><td>获取小明本体</td></tr></tbody></table><h3 id="用户调用限制器usercalllimitmanager"><a class="markdownIt-Anchor" href="#用户调用限制器usercalllimitmanager"></a> 用户调用限制器：<code>UserCallLimitManager</code></h3><p>其主要的方法只有两个，分别为：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>getPrivateCallLimiter()</code></td><td>获得最近的私聊调用限制记录</td></tr><tr><td><code>getGroupCallLimiter()</code></td><td>获得最近的群聊调用限制记录</td></tr></tbody></table><p>上述方法返回的都是 <code>UserCallLimiter</code> 类型的对象。该类型判断是否到调用限制所用的工具，其方法主要有：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>isTooManySoUncallable(long qq)</code></td><td>判断用户是否因为调用次数过多而达到限制</td></tr><tr><td><code>addCallRecord(long qq)</code></td><td>增加一条新的调用记录</td></tr><tr><td><code>shouldNotice()</code></td><td>判断是否应该提醒用户</td></tr><tr><td><code>uncallable(long qq)</code></td><td>判断用户是否能调用</td></tr><tr><td><code>getCallRecords(long qq)</code></td><td>获得某个用户最近的调用记录。如果无记录返回 <code>null</code></td></tr><tr><td><code>getOrPutCallRecords(long qq)</code></td><td>获得或新增某个用户最近的调用记录</td></tr><tr><td><code>isTooFastSoUncallable(long qq)</code></td><td>判断用户是否因为调用过快而达到限制</td></tr><tr><td><code>getConfig()</code></td><td>获得当前的调用限制配置</td></tr><tr><td><code>setConfig(CallLimitConfig config)</code></td><td>设置新的调用限制配置</td></tr></tbody></table><h3 id="过滤器filter"><a class="markdownIt-Anchor" href="#过滤器filter"></a> 过滤器：<code>Filter</code></h3><p>过滤器是一个注解，只能标注在方法上。负责验证信息并用于判断触发的交互方法。</p><table><thead><tr><th>参数名</th><th>含义</th><th>默认值（如果有）</th></tr></thead><tbody><tr><td><code>value</code></td><td>由下一个参数而定</td><td></td></tr><tr><td><code>pattern</code></td><td>过滤方式</td><td><code>FilterPattern.PARAMETER</code></td></tr></tbody></table><p><code>FilterPattern</code> 是过滤方式，是一个枚举类型，其所有可能的取值有：</p><table><thead><tr><th>值</th><th>触发交互方法的时机</th></tr></thead><tbody><tr><td><code>EQUALS</code></td><td>消息等于 <code>value</code> 时</td></tr><tr><td><code>EQUALS_IGNORE_CASE</code></td><td>消息等于 <code>value</code> （忽略大小写）时</td></tr><tr><td><code>STARTS_WITH</code></td><td>消息以 <code>value</code> 开头时</td></tr><tr><td><code>ENDS_WITH</code></td><td>消息以 <code>value</code> 结尾时</td></tr><tr><td><code>STARTS_REGEX</code></td><td>消息开头匹配正则表达式 <code>value</code> 时</td></tr><tr><td><code>ENDS_REGEX</code></td><td>消息结尾匹配正则表达式 <code>value</code> 时</td></tr><tr><td><code>MATCHES</code></td><td>消息匹配正则表达式 <code>value</code> 时</td></tr><tr><td><code>PARAMETER</code></td><td>消息匹配提取参数的正则表达式 <code>value</code> 时</td></tr></tbody></table><p>在使用 <code>PARAMETER</code> 作为过滤方式的过滤器的交互方法中，可以使用 <code>@FilterParameter(&quot;...&quot;)</code> 注解提取参数。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterTestInteractor</span> <span class="keyword">extends</span> <span class="title">CommandInteractorImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Filter(&quot;禁止&#123;what&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterTest1</span><span class="params">(XiaomingUser user, <span class="meta">@FilterParameter(&quot;what&quot;)</span> String what)</span> </span>&#123;</span><br><span class="line">        user.sendMessage(<span class="string">&quot;禁止禁止&#123;&#125;&quot;</span>, what);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述函数的第二个参数使用 <code>@FilterParameter(&quot;what&quot;)</code> 注解，小明将会把过滤器 <code>&#123;what&#125;</code> 处的值填自动填充到这里。例如当输入的消息是 <code>禁止复读</code> 时，<code>what</code> 的值会被设置成 <code>复读</code>。</p><p><code>@FilterParameter</code> 注解还有另一种形式：<code>@FilterParameter(value = &quot;what&quot;, defaultValue = &quot;芜湖&quot;)</code>。其作用是当 <code>@Filter</code> 中的字符串没有出现 <code>&#123;what&#125;</code> 时，使用 <code>&quot;芜湖&quot;</code> 作为该变量的默认值。<code>defaultValue</code> 的默认值为空串 <code>&quot;&quot;</code>。</p><p>值得一提的时，使用 <code>@FilterParameter</code> 的注解不一定必须是 <code>String</code> 类型。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterTestInteractor</span> <span class="keyword">extends</span> <span class="title">CommandInteractorImpl</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Filter(&quot;&#123;qq&#125;可爱吗&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterTest3</span><span class="params">(XiaomingUser user, <span class="meta">@FilterParameter(&quot;qq&quot;)</span> <span class="keyword">long</span> who)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (who == <span class="number">1437100907</span>) &#123;</span><br><span class="line">            user.sendMessage(<span class="string">&quot;当然可爱呀，毕竟是我爸嗷 _(:з」∠)_&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            user.sendMessage(<span class="string">&quot;也可爱，但没我爸可爱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际输入时，在 <code>&#123;qq&#125;</code> 的位置可以输入 <code>QQ</code> 号或直接 <code>@</code> 相关用户。小明会提取对应的 <code>QQ</code> 号，并放在 <code>who</code> 变量中。</p><p>你可以通过重写当前交互器类的 <code>onParameter</code> 方法自由地处理此处的参数。该方法的信息为：</p><table><thead><tr><th>返回类型</th><th>返回含义</th></tr></thead><tbody><tr><td><code>Object</code></td><td>此处应该填入的参数，如果为 <code>null</code> 则匹配不成功</td></tr></tbody></table><p>如果为 <code>null</code>，小明会抛出异常并退出该交互器。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>XiaomingUser user</td><td>当前调用者</td></tr><tr><td>Class<T> clazz</T></td><td>当前参数类</td></tr><tr><td>String parameterName</td><td>参数在 <code>@FilterParameter(&quot;...&quot;)</code> 中的名字</td></tr><tr><td>String currentValue</td><td>参数当前值</td></tr><tr><td>String defaultValue</td><td>参数默认值</td></tr></tbody></table><h3 id="交互器interactor"><a class="markdownIt-Anchor" href="#交互器interactor"></a> 交互器：<code>Interactor</code></h3><p>交互器通过交互方法和用户交互。是小明的主要组件之一。交互器分为两类：指令交互器和消息交互器，其区别在指令交互器多一个自动生成指令格式说明的功能。</p><p>交互器内部使用过滤器 <code>@Filter</code> 注解的方法被称为交互方法，是直接和用户交互的工具。在上述讲解过滤器的例子中我们已经了解了一些简单的交互方法，实际上交互方法还可以有除了 <code>XiaomingUser</code> 和使用 <code>@FilterParameter</code> 注解的参数之外的参数：</p><table><thead><tr><th>参数类型</th><th>自动填充内容</th></tr></thead><tbody><tr><td><code>FilterMatcher</code></td><td>与当前输入匹配的当前交互方法的一个过滤验证器</td></tr><tr><td><code>InteractorMethodDetail</code></td><td>当前交互方法的一些细节</td></tr></tbody></table><p>除此之外，你还可以通过重写 <code>onParameter</code> 的另一个实例以自动填充此处的参数。该方法的信息为：</p><table><thead><tr><th>返回类型</th><th>返回含义</th></tr></thead><tbody><tr><td><code>Object</code></td><td>此处应该填入的参数，如果为 <code>null</code> 则匹配不成功</td></tr></tbody></table><p>如果为 <code>null</code>，小明会抛出异常并退出该交互器。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>XiaomingUser user</td><td>当前调用者</td></tr><tr><td>Parameter parameter</td><td>当前参数</td></tr></tbody></table><h2 id="示例插件"><a class="markdownIt-Anchor" href="#示例插件"></a> 示例插件</h2><ul><li><code>xiaoming-example</code>： (插件示例)[<a href="https://github.com/Chuanwise/xiaoming-example">https://github.com/Chuanwise/xiaoming-example</a>]</li><li><code>xiaoming-lexicons</code>： (插件示例)[<a href="https://github.com/Chuanwise/xiaoming-lexicons">https://github.com/Chuanwise/xiaoming-lexicons</a>]</li></ul>]]></content>
    
    
    <summary type="html">QQ 机器人框架「小明」的开发文档</summary>
    
    
    
    <category term="Java" scheme="https://chuanwise.github.io/categories/Java/"/>
    
    
    <category term="小明" scheme="https://chuanwise.github.io/tags/%E5%B0%8F%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>欢迎串门 (๑•̀ㅂ•́)و✧</title>
    <link href="https://chuanwise.github.io/2021/04/11/%E6%AC%A2%E8%BF%8E%E4%B8%B2%E9%97%A8%20%EF%BC%9A%EF%BC%89/"/>
    <id>https://chuanwise.github.io/2021/04/11/%E6%AC%A2%E8%BF%8E%E4%B8%B2%E9%97%A8%20%EF%BC%9A%EF%BC%89/</id>
    <published>2021-04-11T14:06:29.000Z</published>
    <updated>2021-04-11T16:09:34.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="椽窝"><a class="markdownIt-Anchor" href="#椽窝"></a> 椽窝</h3><p>本周末抽空搭了自己的博客，起名「椽窝」，椽窝是古建筑一类非常不起眼的小窝，但对稍讲究的建筑而言不可或缺。</p><p>一直偶尔有些发些文章的需求。我注意到非常硬核，或者是分享些我在技术上的新发现或感到有趣的事情，在QQ空间获得的赞或互动比平时的说说少多了（虽然对空间的说说有这方面的「要求」听起来感觉挺小学生的，但毕竟是发到空间的当然是希望收获大家的回应），因而感到空间并不是很合适。知乎、CSDN等其他无数可以发文章的站点差不多都给我相同的感觉。而放在手机备忘录或者其他地方，并不便于必要时分享给大家。最后觉得还是搭个自己的博客最好。</p><p>所以你就看到了这一页。</p><p>从小学的时候我就一直希望未来做一个自己的网站。五年级的时候用 <code>PS + DW</code> 做了一个现在看起来技术很差的网站。后来对建站的热情慢慢下降。但在今天在本地测试，看到自己的博客加载出来，那种五年级时第一次看到自己的<code>DW</code>作品在浏览器上显示的愉快感觉马上就出现了，像是领了什么大奖。</p><p>搭建椽窝也是因为一段时间之前偶然发现了<a href="https://lhr.wiki">练巨的博客</a>，在里面看了一些很有意思的上古文章。虽然更新的不勤快但每篇都像是深夜两人都不着急睡时的长谈话。这让我觉得私人搭建的博客像一个不起眼的公开日记本，偶然或定期到访的朋友会令我感到惊喜和意外。每当我输入别人的博客地址，看到关注的人的私人博客有更新的内容时，也感到高兴。这和在一些大的社交媒体平台关注的账号更新了的感受完全不一样，颇有串门的味道。</p><h3 id="我菜爆了"><a class="markdownIt-Anchor" href="#我菜爆了"></a> 「我菜爆了」</h3><p>建立博客的直接原因也是在近期高强度的编程和看文档中，综合感到我菜爆了。</p><p>大一就出了实验结果的论文，咕到大二了还没有写完。大一的高数等课基本没好好听，也没有非常努力去打 OI，在这些方向上我算是硬生生浪费了一年。</p><p>大二上半学期决定好好学习，闷声拿大分。所以平时学习也比大一认真了一大截，但是个人感觉只是在编程的量上有了变化。</p><p>虽然我有了一点点成就，例如自己写了 MC 服务器的自定义指令：CustomCommands 插件、开发了基于 Simbot 框架的可加载插件的 XiaomingBot QQ 机器人框架，但这些代码质量并不很令人满意，时常有一些 Bug 冒出来。</p><p>大二下半学期就决定闷声拿大分的同时，也提升自己的编程水平。</p><p>不过椽窝除了更新技术分享和自己项目的一些文档，我也会把这里当「公开的日记本」，发稍长些的想法和自己的总结之类的。</p><p>今天写这些吧，感谢你这次串门。</p>]]></content>
    
    
    <summary type="html">刚搭好椽窝发出的第一篇文章</summary>
    
    
    
    <category term="闲聊" scheme="https://chuanwise.github.io/categories/%E9%97%B2%E8%81%8A/"/>
    
    
    <category term="闲聊" scheme="https://chuanwise.github.io/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
</feed>
