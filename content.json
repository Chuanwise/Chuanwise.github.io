{"meta":{"title":"CHUANWISE","subtitle":"椽子的博客 (｡･∀･)ﾉﾞ","description":"Hi here👏👏","author":"Chuanwise","url":"https://chuanwise.github.io","root":"/"},"pages":[{"title":"这里好像是「椽子无处不在」的例外 Σ(っ °Д °;)っ","date":"2021-04-11T16:06:09.438Z","updated":"2021-04-11T16:06:09.438Z","comments":false,"path":"/404.html","permalink":"https://chuanwise.github.io/404.html","excerpt":"","text":"(；′⌒`) 你来到了没有椽子的荒漠 返回主页"},{"title":"书单","date":"2021-04-11T12:35:26.953Z","updated":"2021-04-11T12:35:26.953Z","comments":false,"path":"books/index.html","permalink":"https://chuanwise.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-04-11T15:08:01.967Z","updated":"2021-04-11T15:08:01.967Z","comments":false,"path":"about/index.html","permalink":"https://chuanwise.github.io/about/index.html","excerpt":"","text":"椽子，Chuanwise，软件工程学生，单身。初二沉迷编程和古建筑至今。 成就 在编程上，个人感觉没有非常大的成就，但是会（起码从现在开始）努力学习。 在古建筑上可能稍有成就。成立了 Minecraft 古建筑教学组织太学，也和大家一起发布了一些颇受好评的作品。 联系我 QQ：1437100907 微信号：Chuanwise1437100907 邮箱：chuanwise@qq.com"},{"title":"分类","date":"2021-04-11T12:35:26.954Z","updated":"2021-04-11T12:35:26.954Z","comments":false,"path":"categories/index.html","permalink":"https://chuanwise.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-04-11T12:35:26.955Z","updated":"2021-04-11T12:35:26.955Z","comments":true,"path":"links/index.html","permalink":"https://chuanwise.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-04-11T12:35:26.956Z","updated":"2021-04-11T12:35:26.956Z","comments":false,"path":"tags/index.html","permalink":"https://chuanwise.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-04-11T12:35:26.955Z","updated":"2021-04-11T12:35:26.955Z","comments":false,"path":"repository/index.html","permalink":"https://chuanwise.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"小明框架开发文档","slug":"小明框架开发文档","date":"2021-04-18T23:28:57.000Z","updated":"2021-04-19T00:46:28.094Z","comments":true,"path":"2021/04/19/小明框架开发文档/","link":"","permalink":"https://chuanwise.github.io/2021/04/19/%E5%B0%8F%E6%98%8E%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E6%96%87%E6%A1%A3/","excerpt":"","text":"本文对应 Github 项目：小明框架 插件组成 小明插件由 插件主类 和资源文件 plugin.json 组成。 插件主类 插件主类继承自 com.taixue.xiaomingbot.api.plugin.XiaomingPlugin。例如： 123456789package com.chuanwise.xiaomingplugin.example;import com.taixue.xiaomingbot.api.plugin.XiaomingPlugin;/** * @author Chuanwise */public class PluginExample extends XiaomingPlugin &#123;&#125; 这就是一个最简单的插件。他不具备任何功能，但已经可以被小明加载了。 XiaomingPlugin 类中的方法有： 常用方法： 说明 方法名 返回类型 获取插件名 getName() java.lang.String 获取加载该类时的类加载器（便于获取资源文件） getClassLoader() java.lang.ClassLoader 获取日志 getLogger() org.slf4j.Logger 获得插件全名 getCompleteName() java.lang.String 获取小明本体引用（参阅 小明组成） getXiaomingBot() com.taixue.xiaomingbot.api.bot.XiaomingBot 获得配置文件 getConfigFile() java.io.File 获得插件版本 getVersion() java.lang.String 获取插件数据文件夹 getDataFolder() java.io.File 复制默认配置文件 copyDefaultConfig() boolean 加载配置文件 loadConfigAsOrNew(configClass: java.lang.Classfactory: com.taixue.xiaomingbot.util.FileDataFactory) com.taixue.xiaomingbot.util.JSONFileData 以某类的形式加载配置文件 loadConfigAs(configClass: java.lang.Class) com.taixue.xiaomingbot.util.JSONFileData 以图形式加载配置文件 loadConfigAsMap() java.util.Map getDataFolder() 插件数据文件夹小明根目录/plugins/&lt;插件名&gt;，存放插件相关的数据文件。它不一定存在。 getConfigFile() 获得插件数据文件夹内的 config.json。等价于 new File(getDataFolder(), &quot;config.json&quot;)。 getCompleteName() 插件全名是插件名和版本号，等价于 getName() + &quot; (&quot; + getVersion() + &quot;)&quot;。 copyDefaultConfig() 默认配置文件是资源文件 config.json。如果插件数据文件夹中不存在配置文件，则将其复制到该处。 插件间通信相关方法 说明 方法名 返回类型 和其他插件挂钩 hook(otherPlugin: com.taixue.xiaomingbot.api.plugin.XiaomingPluginholderClass: java.lang.Class)hook(pluginName: java.lang.StringholderClass: java.lang.Class) com.taixue.xiaomingbot.api.plugin.HookHolder 判断是否正在和某插件挂钩 isHookingWith(pluginName: java.lang.String)isHookingWith(plugin: com.taixue.xiaomingbot.api.plugin.XiaomingPlugin) boolean 主动和某插件脱钩 unhook(pluginName: java.lang.String)unhook(plugin: com.taixue.xiaomingbot.api.plugin.XiaomingPlugin)unhook(hookHolder: com.taixue.xiaomingbot.api.plugin.HookHolder) boolean 获得和所有插件的 HookHolder getHookHolders() java.util.Map 和所有插件脱钩 unHookAll() boolean 其他插件和本插件挂钩时的操作 onHook(otherPlugin: com.taixue.xiaomingbot.api.plugin.XiaomingPluginholder: com.taixue.xiaomingbot.api.plugin.HookHolder) void 获取和指定插件的 HookHolder getHookHolder(otherPluginName: java.lang.String) com.taixue.xiaomingbot.api.plugin.HookHolder 可供重写的方法 执行时机 方法名 返回类型 其他插件与本插件脱钩时 onUnhook(plugin: com.taixue.xiaomingbot.api.plugin.XiaomingPluginholder: com.taixue.xiaomingbot.api.plugin.HookHolder) void 插件加载时 onEnable() void 插件卸载时 onDisable() void 有群聊消息时 onGroupMessage(userData: com.taixue.xiaomingbot.api.listener.userdata.GroupDispatcherUser) boolean 有私聊消息时 onPrivateMessage(userData: com.taixue.xiaomingbot.api.listener.userdata.PrivateDispatcherUser) boolean plugin.json 该资源文件是小明识别插件主类的唯一途径。其至少包含 main 键值，否则小明无法加载插件。例如： 123&#123; &quot;main&quot;: &quot;com.chuanwise.xiaomingplugin.example.PluginExample&quot;&#125; 此外你还可以写： 值类型 键名 值说明 字符串 name 插件名 字符串 version 插件版本 字符串数组 fronts 前置插件名（加载本插件前先加载的插件） 字符串 author 作者名 字符串数组 authors 作者们的名字 例如 123456&#123; &quot;name&quot;: &quot;Lexicons&quot;, &quot;version&quot;: &quot;1.0&quot;, &quot;authors&quot;: [ &quot;Chuanwise&quot; ], &quot;main&quot;: &quot;com.taixue.xiaominglexicons.LexiconsPlugin&quot;&#125; 未来会在 XiaomingPlugin 中增加获得 plugin.json 中其他自定义信息的方法。 更进一步 交互器 如果想让你的插件响应群/私聊消息，有两种方法：重写 XiaomingPlugin 中的 onGroupMessage 或 onPrivateMessage。 但它处理上下文相关消息时非常麻烦： 1234567A：你好啊B：我不好 &#x2F;&#x2F; 普通消息交互器不响应A：小明帮帮我 小明：来啦，啥事 qwq？ &#x2F;&#x2F; 本交互器响应A：讲个冷笑话给B听小明：@B 从前有座山，山上有座庙，庙里有个老和尚在玩 Minecraft。 &#x2F;&#x2F; 交互器响应上一条消息，而非将其当做普通的群聊消息B：呜呜呜更难受了 下面介绍交互器。交互器是 com.taixue.xiaomingbot.api.listener.interactor.Interactor 的子类，主要分两种：群聊交互器 com.taixue.xiaomingbot.api.listener.interactor.GroupInteractor 和私聊交互器 com.taixue.xiaomingbot.api.listener.interactor.PrivateInteractor。 群聊交互器 这是最简单的一个群聊交互器： 1234567891011121314package com.chuanwise.xiaomingplugin.example.interactor;import com.taixue.xiaomingbot.api.listener.interactor.GroupInteractor;import com.taixue.xiaomingbot.api.listener.userdata.GroupInteractorUser;/** * @author Chuanwise */public class ExampleGroupInteractor extends GroupInteractor&lt;GroupInteractorUser&gt; &#123; @Override public boolean onMessage(GroupInteractorUser groupInteractorUser) &#123; return false; &#125;&#125; GroupInteractor 的参数必须是 GroupInteractorUser 或其子类，是上下文交流的相关信息。一般使用 GroupInteractorUser 就可以。 onMessage 将在出现了新的群聊消息时执行，返回 true 时表示不再寻找其他交互器匹配当前输入，false 则让小明继续寻找其他交互器。上述场景可以实现为： 123456789101112131415161718192021222324252627282930313233343536373839404142package com.chuanwise.xiaomingplugin.example.interactor;import com.taixue.xiaomingbot.api.listener.interactor.GroupInteractor;import com.taixue.xiaomingbot.api.listener.userdata.GroupInteractorUser;import com.taixue.xiaomingbot.util.AtUtil;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * @author Chuanwise */public class ExampleGroupInteractor extends GroupInteractor&lt;GroupInteractorUser&gt; &#123; public static final Pattern TELL_JOKE_TO = Pattern.compile(&quot;讲个(冷)?笑话给\\\\s*(?&lt;qq&gt;.*)\\\\s*(听)?&quot;); @Override public boolean onMessage(GroupInteractorUser groupInteractorUser) &#123; final String message = groupInteractorUser.getMessage(); if (!message.equals(&quot;小明帮帮我&quot;)) &#123; return false; &#125; groupInteractorUser.sendMessage(&quot;来啦，啥事 qwq？&quot;); final String nextInput = getNextInput(groupInteractorUser); final Matcher matcher = TELL_JOKE_TO.matcher(nextInput); if (matcher.matches()) &#123; final String qqString = matcher.group(&quot;qq&quot;); final long qq = AtUtil.parseQQ(qqString); if (qq == -1) &#123; groupInteractorUser.sendMessage(&quot;&#123;&#125; 是谁呀 (╯▔皿▔)╯&quot;, qqString); &#125; else &#123; groupInteractorUser.atSendGroupMessage(qq, &quot;从前有座山，山上有座庙，庙里有个老和尚在玩 Minecraft。&quot;); &#125; &#125; else &#123; groupInteractorUser.sendMessage(&quot;小明不知道你说的是什么意思呢 (；′⌒`)&quot;); &#125; return true; &#125;&#125; 随后在 XiaomingPlugin 中执行语句 getXiaomingBot().getGroupInteractorManager().register(new ExampleGroupInteractor(), this); 便可以注册该群聊交互器。 小明组成 （待完成） 插件间通信 小明的插件间通信主要采用基于 API 的的通信方式。方式主要有两种：直接访问插件和通过事先设计好的 API。推荐采用第二种方法。 直接访问插件 通过 getXiaomingBot().getPluginManager().getPlugin(&quot;插件名&quot;) 便可获得一个被加载在小明的插件。其类型为 XiaomingPlugin，需手动转换为其主类类型。例如： 1234567891011121314package wikiBranch.chuanwise.myxiaomingplugin;import com.taixue.xiaomingbot.api.plugin.XiaomingPlugin;import com.taixue.xiaominglexicons.LexiconsPlugin;/** * @author Chuanwise */public class MyXiaomingPlugin extends XiaomingPlugin &#123; @Override public void onEnable() &#123; XiaomingLexicons plugin = (XiaomingLexicons) getXiaomingBot().getPluginManager().getPlugin(&quot;XiaomingLexicons&quot;); &#125;&#125; 更为推荐的 hook 通信方式 如果你希望其他插件主动与你通信，你需要写一个通信所用的类，其继承自 com.taixue.xiaomingbot.api.plugin.HookHolder。例如： 12345678910111213141516171819202122232425package com.taixue.xiaominglexicons.hook;import com.taixue.xiaomingbot.api.plugin.HookHolder;import com.taixue.xiaomingbot.api.plugin.XiaomingPlugin;import com.taixue.xiaominglexicons.LexiconsPlugin;/** * 插件通信所用类 */public class LexiconsHookHolder extends HookHolder &#123; /** * 构造一个通信所用类 * @param sponsor Hook 行为的发起插件，一般为 XiaomingPlugin。如果需要指定该类的使用者，也可以使用其他 XiaomingPlugin 的子类。 * @param recipient Hook 行为的接受插件，一般是本插件主类类型 */ public LexiconsHookHolder(XiaomingPlugin sponsor, XiaomingLexicons recipient) &#123; super(sponsor, recipient); &#125; /** * 插件通信所用的一些方法 */ public void action() &#123;&#125;&#125; 其他插件需要与你的类通信时，需要 hook 你的插件。例如： 123456789101112131415161718192021222324252627package wikiBranch.chuanwise.myxiaomingplugin;import com.taixue.xiaomingbot.api.plugin.XiaomingPlugin;import com.taixue.xiaominglexicons.hook.LexiconsHookHolder;/** * @author Chuanwise */public class MyXiaomingPlugin extends XiaomingPlugin &#123; @Override public void onEnable() &#123; LexiconsHookHolder lexicons = null; try &#123; lexicons = hook(&quot;Lexicons&quot;, LexiconsHookHolder.class); &#125; catch (Exception exception) &#123; exception.printStackTrace(); &#125; if (Objects.isNull(lexicons)) &#123; // failure &#125; else &#123; // success lexicons.action(); &#125; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://chuanwise.github.io/categories/Java/"}],"tags":[{"name":"小明","slug":"小明","permalink":"https://chuanwise.github.io/tags/%E5%B0%8F%E6%98%8E/"}]},{"title":"欢迎串门 (๑•̀ㅂ•́)و✧","slug":"欢迎串门 ：）","date":"2021-04-11T14:06:29.000Z","updated":"2021-04-11T16:09:34.404Z","comments":true,"path":"2021/04/11/欢迎串门 ：）/","link":"","permalink":"https://chuanwise.github.io/2021/04/11/%E6%AC%A2%E8%BF%8E%E4%B8%B2%E9%97%A8%20%EF%BC%9A%EF%BC%89/","excerpt":"","text":"椽窝 本周末抽空搭了自己的博客，起名「椽窝」，椽窝是古建筑一类非常不起眼的小窝，但对稍讲究的建筑而言不可或缺。 一直偶尔有些发些文章的需求。我注意到非常硬核，或者是分享些我在技术上的新发现或感到有趣的事情，在QQ空间获得的赞或互动比平时的说说少多了（虽然对空间的说说有这方面的「要求」听起来感觉挺小学生的，但毕竟是发到空间的当然是希望收获大家的回应），因而感到空间并不是很合适。知乎、CSDN等其他无数可以发文章的站点差不多都给我相同的感觉。而放在手机备忘录或者其他地方，并不便于必要时分享给大家。最后觉得还是搭个自己的博客最好。 所以你就看到了这一页。 从小学的时候我就一直希望未来做一个自己的网站。五年级的时候用 PS + DW 做了一个现在看起来技术很差的网站。后来对建站的热情慢慢下降。但在今天在本地测试，看到自己的博客加载出来，那种五年级时第一次看到自己的DW作品在浏览器上显示的愉快感觉马上就出现了，像是领了什么大奖。 搭建椽窝也是因为一段时间之前偶然发现了练巨的博客，在里面看了一些很有意思的上古文章。虽然更新的不勤快但每篇都像是深夜两人都不着急睡时的长谈话。这让我觉得私人搭建的博客像一个不起眼的公开日记本，偶然或定期到访的朋友会令我感到惊喜和意外。每当我输入别人的博客地址，看到关注的人的私人博客有更新的内容时，也感到高兴。这和在一些大的社交媒体平台关注的账号更新了的感受完全不一样，颇有串门的味道。 「我菜爆了」 建立博客的直接原因也是在近期高强度的编程和看文档中，综合感到我菜爆了。 大一就出了实验结果的论文，咕到大二了还没有写完。大一的高数等课基本没好好听，也没有非常努力去打 OI，在这些方向上我算是硬生生浪费了一年。 大二上半学期决定好好学习，闷声拿大分。所以平时学习也比大一认真了一大截，但是个人感觉只是在编程的量上有了变化。 虽然我有了一点点成就，例如自己写了 MC 服务器的自定义指令：CustomCommands 插件、开发了基于 Simbot 框架的可加载插件的 XiaomingBot QQ 机器人框架，但这些代码质量并不很令人满意，时常有一些 Bug 冒出来。 大二下半学期就决定闷声拿大分的同时，也提升自己的编程水平。 不过椽窝除了更新技术分享和自己项目的一些文档，我也会把这里当「公开的日记本」，发稍长些的想法和自己的总结之类的。 今天写这些吧，感谢你这次串门。","categories":[{"name":"闲聊","slug":"闲聊","permalink":"https://chuanwise.github.io/categories/%E9%97%B2%E8%81%8A/"}],"tags":[{"name":"闲聊","slug":"闲聊","permalink":"https://chuanwise.github.io/tags/%E9%97%B2%E8%81%8A/"}]}],"categories":[{"name":"Java","slug":"Java","permalink":"https://chuanwise.github.io/categories/Java/"},{"name":"闲聊","slug":"闲聊","permalink":"https://chuanwise.github.io/categories/%E9%97%B2%E8%81%8A/"}],"tags":[{"name":"小明","slug":"小明","permalink":"https://chuanwise.github.io/tags/%E5%B0%8F%E6%98%8E/"},{"name":"闲聊","slug":"闲聊","permalink":"https://chuanwise.github.io/tags/%E9%97%B2%E8%81%8A/"}]}